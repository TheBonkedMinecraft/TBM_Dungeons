plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {url = "https://maven.kyrptonaught.dev"}
    maven {url = "https://maven.wispforest.io" }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

loom {
    accessWidenerPath.set(file(".accesswidener"))
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    //mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    mappings loom.layered() {
        mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        //officialMojangMappings()
        //parchment("org.parchmentmc.data:parchment-1.19.2:2022.11.27")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.76.0+1.19.2"
    modImplementation 'net.kyrptonaught:customportalapi:0.0.1-beta63-1.19.X'
    include 'net.kyrptonaught:customportalapi:0.0.1-beta63-1.19.X'
    modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.0.2"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:5.0.2"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-block:5.0.2"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:5.0.2"
    modCompileOnly 'org.spongepowered:configurate-hocon:4.0.0'
    include "io.wispforest:owo-sentinel:${project.owo_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}